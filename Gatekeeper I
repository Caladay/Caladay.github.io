pragma solidity ^0.5.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol';

contract GatekeeperOne {

  using SafeMath for uint256;
  address public entrant;

  modifier gateOne() {
    require(msg.sender != tx.origin, "GateOne");
    _;
  }

  modifier gateTwo() {
    require(gasleft().mod(8191) == 0, "GateTwo");
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}


contract Keymaster{
    using SafeMath for uint256;
 
    GatekeeperOne public gkp;
    uint constant gate2num = 8191;
    uint256 counter = 0;
    
    function setGatekeeperOne(address _addr) public{
        gkp = GatekeeperOne(_addr);
    }
    
    function letMeIn(bytes8 key) public{
        address(gkp).call.gas(8603)(abi.encodeWithSignature("enter(bytes8)", key));
       
    }
    
}
